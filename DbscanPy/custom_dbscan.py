import numpy as np


def MyDBSCAN(D, eps, MinPts):
    labels = [0]*len(D)
    C = 0
    for P in range(0, len(D)):
        if not (labels[P] == 0):
           continue
        
        NeighborPts = regionQuery(D, P, eps)
        if len(NeighborPts) < MinPts:
            labels[P] = -1 
        else: 
           C += 1
           growCluster(D, labels, P, NeighborPts, C, eps, MinPts)
    
    return labels


def growCluster(D, labels, P, NeighborPts, C, eps, MinPts):
    labels[P] = C
    
    i = 0
    while i < len(NeighborPts):    
        
        Pn = NeighborPts[i]
       
        if labels[Pn] == -1:
           labels[Pn] = C
        
        elif labels[Pn] == 0:
            labels[Pn] = C
            
            PnNeighborPts = regionQuery(D, Pn, eps)
            if len(PnNeighborPts) >= MinPts:
                NeighborPts = NeighborPts + PnNeighborPts
        i += 1        
    


def regionQuery(D, P, eps):
    neighbors = []
    for Pn in range(0, len(D)):
        if np.linalg.norm(D[P] - D[Pn]) < eps:
           neighbors.append(Pn)
            
    return neighbors




X = np.array([[41, 17], [34, 0], [19, 24], [28, 8], [12, 14], [5, 45], [31, 27], [11, 41], [45, 42], [27, 36], [41, 4], [2, 3], [42, 32], [21, 16], [18, 45], [47, 26], [21, 38], [19, 12], [17, 49], [35, 44], [3, 11], [22, 33], [23, 14], [41, 11], [3, 18], [47, 44], [12, 7], [37, 9], [23, 41], [29, 28], [16, 35], [40, 42], [38, 6], [40, 42], [14, 48], [46, 5], [40, 29], [20, 0], [6, 1], [43, 48], [29, 23], [34, 4], [6, 40], [16, 26], [31, 8], [44, 39], [26, 23], [37, 38], [18, 32], [29, 41], [33, 15], [39, 8], [4, 30], [27, 6], [23, 36], [21, 45], [24, 22], [20, 29], [27, 23], [47, 12], [36, 40], [11, 36], [5, 17], [5, 24], [31, 2], [0, 0], [41, 24], [16, 30], [7, 41], [7, 37], [7, 37], [3, 33], [45, 9], [9, 8], [21, 38], [22, 46], [6, 30], [13, 18], [0, 41], [12, 5], [10, 9], [24, 37], [48, 33], [45, 41], [2, 0], [41, 36], [24, 20], [46, 21], [48, 49], [18, 34], [31, 34], [3, 49], [18, 38], [0, 38], [27, 17], [28, 43], [48, 33], [7, 21], [10, 17], [13, 14], [9, 16], [35, 1], [0, 49], [19, 6], [48, 3], [24, 8], [44, 9], [39, 2], [45, 35], [43, 43], [23, 37], [14, 3], [48, 0], [8, 18], [30, 46], [48, 31], [39, 48], [9, 7], [22, 22], [38, 42], [38, 29], [40, 7], [8, 41], [15, 38], [6, 11], [2, 34], [22, 5], [28, 46], [12, 36], [25, 33], [19, 42], [44, 16], [31, 48], [22, 1], [21, 49], [7, 26], [42, 39], [25, 12], [0, 10], [3, 19], [11, 38], [1, 39], [5, 23], [2, 35], [32, 35], [38, 26], [17, 7], [32, 32], [19, 4], [21, 39], [26, 29], [18, 42], [25, 5], [34, 49], [41, 12], [45, 10], [18, 3], [39, 23], [29, 46], [37, 29], [49, 37], [16, 49], [43, 45], [47, 16], [36, 5], [38, 32], [5, 34], [14, 1], [16, 21], [36, 13], [13, 5], [35, 3], [12, 8], [32, 45], [13, 6], [21, 8], [46, 32], [31, 44], [46, 22], [29, 11], [35, 0], [23, 16], [44, 9], [42, 39], [3, 24], [4, 10], [45, 49], [36, 13], [24, 22], [18, 18], [37, 5], [8, 41], [2, 25], [27, 14], [14, 24], [34, 24], [22, 9], [33, 20], [37, 47], [18, 27], [23, 20], [13, 18], [42, 35], [2, 30], [13, 27], [2, 49], [27, 25], [43, 24], [23, 22], [11, 31], [3, 32], [5, 43], [25, 31], [42, 42], [22, 36], [14, 0], [37, 10], [13, 24], [20, 20], [35, 33], [11, 10], [46, 17], [35, 0], [40, 44], [45, 24], [19, 25], [26, 44], [8, 2], [21, 16], [28, 43], [1, 34], [18, 14], [19, 2], [0, 37], [10, 26], [10, 7], [20, 15], [26, 27], [43, 8], [14, 9], [32, 36], [15, 37], [27, 24], [25, 27], [29, 28], [23, 20], [2, 12], [23, 46], [37, 11], [45, 25], [14, 10], [2, 16], [30, 26], [11, 21], [11, 47], [3, 20], [40, 24], [38, 13], [40, 1], [12, 29], [0, 13], [8, 28], [15, 7], [27, 0], [8, 39], [3, 10], [7, 24], [27, 8], [13, 37], [1, 0], [10, 28], [43, 34], [5, 40], [11, 4], [35, 6], [22, 0], [23, 35], [6, 16], [26, 7], [26, 7], [37, 21], [19, 11], [46, 22], [17, 12], [17, 46], [35, 41], [23, 29], [29, 15], [9, 32], [46, 5], [3, 12], [34, 34], [4, 22], [7, 19], [32, 13], [7, 33], [11, 35], [17, 48], [25, 38], [23, 42], [4, 11], [41, 25], [9, 25], [21, 20], [26, 34], [5, 33], [0, 48], [29, 1], [43, 34], [37, 34], [6, 43], [26, 5], [12, 48], [31, 0], [13, 41], [5, 5], [42, 12], [11, 27], [24, 28], [2, 43], [46, 23], [40, 13], [25, 22], [18, 10], [17, 32], [12, 45], [19, 31], [40, 38], [35, 40], [47, 39], [40, 45], [3, 14], [1, 40], [44, 8], [35, 9], [42, 5], [14, 31], [3, 29], [25, 8], [42, 47], [49, 6], [11, 27], [17, 41], [29, 40], [13, 24], [1, 27], [15, 33], [13, 42], [24, 1], [42, 9], [20, 28], [27, 34], [25, 36], [48, 20], [37, 47], [4, 3], [21, 13], [6, 13], [10, 21], [39, 40], [14, 42], [19, 13], [41, 4], [18, 32], [0, 5], [25, 39], [3, 22], [48, 47], [34, 48], [21, 14], [13, 25], [45, 12], [46, 28], [19, 12], [19, 35], [39, 44], [15, 40], [45, 8], [18, 20], [1, 23], [32, 22], [2, 37], [20, 13], [1, 3], [23, 27], [0, 19], [15, 15], [28, 43], [47, 38], [43, 37], [9, 13], [49, 31], [38, 42], [8, 10], [21, 8], [4, 38], [46, 40], [49, 43], [30, 20], [48, 17], [36, 33], [35, 26], [35, 38], [3, 29], [24, 48], [23, 9], [7, 16], [44, 5], [18, 26], [11, 25], [5, 1], [49, 46], [34, 15], [14, 42], [25, 13], [42, 46], [48, 22], [26, 6], [23, 29], [4, 5], [26, 12], [25, 43], [15, 36], [36, 41], [14, 44], [6, 2], [36, 38], [32, 5], [15, 31], [30, 41], [25, 11], [37, 36], [40, 0], [12, 34], [43, 3], [16, 2], [8, 12], [33, 4], [3, 34], [3, 6], [48, 24], [17, 13], [9, 28], [0, 30], [18, 8], [0, 5], [11, 14], [3, 26], [43, 9], [2, 11], [39, 48], [32, 3], [24, 20], [2, 23], [31, 19], [28, 9], [8, 19], [21, 3], [45, 31], [4, 42], [35, 13], [48, 39], [22, 38], [37, 10], [11, 34], [8, 11], [9, 43], [15, 19], [37, 19], [8, 0], [21, 14], [17, 15], [5, 15], [30, 39], [12, 38], [32, 4], [35, 10], [34, 24], [30, 15], [1, 41], [15, 29], [10, 48], [23, 38], [27, 32], [6, 39], [13, 8], [41, 40], [23, 13], [28, 34], [28, 0], [21, 35], [24, 21], [33, 17], [3, 45], [18, 25], [26, 29], [0, 48], [9, 43], [36, 30], [16, 49]])

print('Runing scikit-learn implementation...')

labels = MyDBSCAN(X, eps=30, MinPts=10)

max_clusters = max(labels) + 1
clusters = {}
noises = []
for i in range(0, max_clusters):
    cluster = []
    for j in range(0, len(labels)):
        if i == labels[j]:
            cluster.append(list(X[j]))
    clusters[i] = cluster

for j in range(0, len(labels)):
    if labels[j] == - 1:
        noises.append(list(X[j]))


print("Number of clusters = ", max_clusters)
print(clusters)
print("Noises")
print(noises)
